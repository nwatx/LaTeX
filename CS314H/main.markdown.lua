local ran_ok, error = pcall(function() local ran_ok, kpse = pcall(require, "kpse") if ran_ok then kpse.set_program_name("luatex") end local lfs = require("lfs") local cacheDir = "./_markdown_main" if not lfs.isdir(cacheDir) then assert(lfs.mkdir(cacheDir)) end local md = require("markdown") local convert = md.new({cacheDir = "./_markdown_main", frozenCacheFileName = "./_markdown_main/frozenCache.tex", blankBeforeBlockquote = false, blankBeforeCodeFence = false, blankBeforeHeading = false, breakableBlockquotes = false, citationNbsps = true, citations = false, codeSpans = true, contentBlocks = false, contentBlocksLanguageMap = "markdown-languages.json", definitionLists = false, eagerCache = true, expectJekyllData = false, fencedCode = false, finalizeCache = false, footnotes = false, frozenCacheCounter = 0, hardLineBreaks = false, hashEnumerators = false, headerAttributes = false, html = false, hybrid = false, inlineFootnotes = false, jekyllData = false, pipeTables = false, preserveTabs = false, relativeReferences = false, shiftHeadings = 0, slice = "^ $", smartEllipses = true, startNumber = true, stripIndent = false, tableCaptions = false, taskLists = false, texComments = false, tightLists = true, underscores = true, }) local file = assert(io.open("./main.markdown.in", "r"), [[could not open file "./main.markdown.in" for reading]]) local input = assert(file:read("*a")) assert(file:close()) print(convert(input:gsub("\r\n?", "\n") .. "\n"))end) if not ran_ok then local file = io.open("./main.markdown.err", "w") if file then file:write(error .. "\n") file:close() end print('\\begingroup\\ExplSyntaxOn\\msg_error:nnvv{luabridge}{failed-to-execute}{g_luabridge_output_dirname_str}{g_luabridge_output_dirname_str}\\endgroup') end
